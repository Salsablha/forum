#include <stdio.h>
#define MAX 20 //maksimum data queue
using namespace std;

//Deklarasi struct antrian
struct Queue {
	int front, rear, data[MAX];
}Q;

//cek apakah antrian penuh
bool isFull() {
	return Q.rear == MAX;
}

//cek apakah antrian kosong
bool isEmpty() {
	return Q.rear == 0;
}

//Menampilkan Queue
void printQueue() 
{
	if (isEmpty()) {
    printf("Antrian kosong\n");
	}
	else {
		printf("QUEUE : ");
		for (int i = Q.front; i < Q.rear; i++)
		//menambahkan koma jika data tidak terdapat di antrian pertama
			printf(Q.data[i]); 
            printf((Q.rear-1 == i) ? "" : ",");
		printf();
    }
}

//manambahkan data ke antrian
void enqueue() {
	if (isFull())
	{
		printf("Antrian penuh!\n");
	}
	else {
		int data;
		//menambahkan data ke antrian
		prontf("Masukkan Data : ");
        scanf(data);
		Q.data[Q.rear] = data;
		//menempatkan tail pada elemen data terakhir yang ditambahkan
		Q.rear++;
		printf("Data ditambahkan\n");
		printQueue();
	}
}

// mengambil data dari antrian
void dequeue() {
	if (isEmpty())
	{
		printf("Antrian masih kosong\n");
	}
	else{
		printf("Mengambil data \n", Q.data[Q.front]);
		//menggeser antrian data ke head
		for (int i = Q.front; i < Q.rear; i++)
			Q.data[i] = Q.data[i + 1];
		//menempatkan tail pada data terakhir yang digeser
		Q.rear--;
		printQueue();
	}
}

int main() {
	int choose;
	do
	{
		//Tampilan menu
		printf("-------------------\n");
        printf("   Menu Pilihan\n");
		printf("-------------------\n");
	    printf(" [1] Enqueue \n");
		printf(" [2] Dequeue\n");
	    printf(" [3] Keluar \n\n");
	    printf("-------------------\n");
		printf("Masukkan pilihan : ");
            scanf(choose);
		switch (choose)
		{
		case 1:
			enqueue();
			break;
		case 2:
			dequeue();
			break;
		default:
			printf("Pilihan tidak tersedia\n");
			break;
		}
	} while (choose !=3);
	return 0;
}
